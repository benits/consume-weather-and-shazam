{"version":3,"sources":["assets/block.png","providers/weather-provider.jsx","hooks/weather-hooks.js","components/loading.jsx","components/weather-display.jsx","components/header.jsx","providers/shazam/shazam-provider.jsx","providers/shazam/utils.js","hooks/shazam-hooks.js","components/music-section.jsx","container/page-main.jsx","App.jsx","index.jsx"],"names":["API_WEATHER_URL","WeatherProviderContext","createContext","loading","weather","WeatherProvider","children","toast","useToast","useState","setWeather","setLoading","location","setLocation","toastErrorGetLocation","title","message","description","status","duration","isClosable","variant","position","successGetLocation","lat","long","coords","latitude","longitude","axios","get","params","lon","appid","process","lang","units","then","result","data","catch","error","finally","useEffect","navigator","geolocation","getCurrentPosition","my","flexDirection","src","LocationBlock","height","fontSize","mt","href","colorScheme","color","fontWeight","textDecoration","contextValues","submitSearchByCity","city","q","getWeatherforSearchByCity","Provider","value","useWeather","useContext","Loading","width","thickness","speed","emptyColor","size","WeatherDisplay","local","temperature","spacing","alignItems","direction","Header","useForm","register","handleSubmit","setValue","name","px","main","temp","onSubmit","id","isRequired","htmlFor","type","placeholder","required","isLoading","ShazamProviderContext","playlist","ShazamProvider","setPlaylist","getMusicByTemperature","tempeture","options","method","url","genre_code","limit","headers","request","response","useShazam","MusicSection","isFitted","mb","_focus","outline","columns","map","music","p","maxWidth","borderColor","borderWidth","borderRadius","images","coverart","as","Link","subtitle","PageMain","App","resetCSS","theme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc697f06.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/block.64d85bbf.png\";","import {\n  Center,\n  Heading,\n  Image,\n  Link,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useEffect, useState } from 'react';\nimport LocationBlock from '../assets/block.png';\n\nconst API_WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\nexport const WeatherProviderContext = createContext({\n  loading: false,\n  weather: {},\n});\n\nconst WeatherProvider = ({ children }) => {\n  const toast = useToast();\n\n  const [weather, setWeather] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const [location, setLocation] = useState(false);\n\n  const getWeather = (lat, long) => axios.get(API_WEATHER_URL, {\n    params: {\n      lat,\n      lon: long,\n      appid: process.env.REACT_APP_OPEN_WHEATER_KEY,\n      lang: 'pt',\n      units: 'metric',\n    },\n  });\n\n  const getWeatherforSearchByCity = (city) => axios.get(API_WEATHER_URL, {\n    params: {\n      q: city,\n      appid: process.env.REACT_APP_OPEN_WHEATER_KEY,\n      lang: 'pt',\n      units: 'metric',\n    },\n  });\n\n  const toastErrorGetLocation = (title, message) => toast({\n    title,\n    description: message,\n    status: 'error',\n    duration: 5000,\n    isClosable: true,\n    variant: 'top-accent',\n    position: 'top-right',\n  });\n\n  const successGetLocation = (position) => {\n    setLoading(true);\n\n    getWeather(position.coords.latitude, position.coords.longitude)\n      .then(\n        (result) => setWeather(result.data),\n      )\n      .catch((error) => toastErrorGetLocation('Error getting Weather', error.message))\n      .finally(() => setLoading(false));\n\n    setLocation(true);\n  };\n\n  const submitSearchByCity = (city) => {\n    if (!city) return;\n\n    setLoading(true);\n\n    getWeatherforSearchByCity(city)\n      .then((result) => {\n        setWeather(result.data);\n      })\n      .catch((error) => toastErrorGetLocation('Error getting Weather', error.message))\n      .finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      successGetLocation,\n      () => toastErrorGetLocation('Error getting location', 'Você precisa habilitar sua localização'),\n    );\n  }, []);\n\n  if (!location) {\n    return (\n      <Center my={8} flexDirection=\"column\">\n        <Image src={LocationBlock} height=\"100px\" />\n        <Heading fontSize=\"2xl\" mt={4}>\n          Você precisa habilitar sua localização\n        </Heading>\n        <Text>\n          Em seguida\n          {' '}\n          <Link href=\"/\" colorScheme=\"blue\" color=\"blue.600\" fontWeight=\"semibold\" textDecoration=\"underline\">atualize a pagina</Link>\n        </Text>\n      </Center>\n    );\n  }\n\n  const contextValues = {\n    loading,\n    weather,\n    submitSearchByCity,\n  };\n\n  return (\n    <WeatherProviderContext.Provider value={contextValues}>\n      {children}\n    </WeatherProviderContext.Provider>\n  );\n};\n\nWeatherProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default WeatherProvider;\n","import { useContext } from 'react';\nimport { WeatherProviderContext } from '../providers/weather-provider';\n\nconst useWeather = () => useContext(\n  WeatherProviderContext,\n);\n\nexport default useWeather;\n","import { Center, Spinner } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction Loading() {\n  return (\n    <Center my={8} width=\"full\">\n      <Spinner\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color=\"blue.500\"\n        size=\"xl\"\n      />\n    </Center>\n  );\n}\n\nexport default Loading;\n","import {\n  Heading,\n  Stack,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst WeatherDisplay = ({ local, description, temperature }) => (\n  <VStack spacing={4} alignItems=\"flex-start\">\n    <Stack spacing={[2, 4]} direction={['column', 'row']}>\n      <Text fontSize=\"xl\">Clima na localização:</Text>\n      <Heading fontSize=\"2xl\">\n        {local}\n        (\n        {description}\n        )\n      </Heading>\n    </Stack>\n    <Stack spacing={[2, 4]} direction={['column', 'row']}>\n      <Text fontSize=\"lg\">Temperatura atual:</Text>\n      <Heading fontSize=\"lg\">\n        {temperature}\n        °\n      </Heading>\n    </Stack>\n  </VStack>\n);\n\nWeatherDisplay.propTypes = {\n  description: PropTypes.string.isRequired,\n  local: PropTypes.string.isRequired,\n  temperature: PropTypes.number.isRequired,\n};\n\nexport default WeatherDisplay;\n","import {\n  Box,\n  Button,\n  Center,\n  FormControl,\n  FormLabel,\n  Stack,\n  Input,\n} from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport useWeather from '../hooks/weather-hooks';\nimport Loading from './loading';\nimport WeatherDisplay from './weather-display';\n\nconst Header = () => {\n  const {\n    register, handleSubmit, setValue,\n  } = useForm();\n  const { loading, weather, submitSearchByCity } = useWeather();\n\n  const onSubmit = (data) => submitSearchByCity(data.city);\n\n  useEffect(() => {\n    if (weather?.name) setValue('city', weather?.name);\n  }, [weather]);\n\n  return (\n    <Center my={8}>\n      <Box width=\"full\" px={8}>\n\n        {!!loading && (\n          <Loading />\n        )}\n\n        {!loading && !!weather && (\n          <WeatherDisplay\n            temperature={weather.main.temp}\n            local={weather.name}\n            description={weather.weather[0].description}\n          />\n        )}\n\n        <Box mt={8}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Stack spacing={[4, 4]} direction={['column', 'row']} alignItems=\"end\">\n\n              <FormControl id=\"city\" isRequired>\n                <FormLabel htmlFor=\"city\">Buscar por cidade:</FormLabel>\n                <Input\n                  id=\"city\"\n                  type=\"text\"\n                  placeholder=\"Digite o nome de uma cidade\"\n                  {...register('city', { required: true })}\n                />\n              </FormControl>\n\n              <Button type=\"submit\" colorScheme=\"blue\" isLoading={loading} width={['full', 'xs']}>Buscar</Button>\n            </Stack>\n          </form>\n        </Box>\n      </Box>\n    </Center>\n  );\n};\n\nexport default Header;\n","import {\n  useToast,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport React, { createContext, useState } from 'react';\nimport { getGenreByTempeture } from './utils';\n\nexport const ShazamProviderContext = createContext({\n  loading: false,\n  playlist: [],\n});\n\nconst ShazamProvider = ({ children }) => {\n  const toast = useToast();\n\n  const [playlist, setPlaylist] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const toastErrorGetLocation = (title, message) => toast({\n    title,\n    description: message,\n    status: 'error',\n    duration: 5000,\n    isClosable: true,\n    variant: 'top-accent',\n    position: 'top-right',\n  });\n\n  const getMusicByTemperature = (temperature) => {\n    if (!temperature) return;\n\n    setLoading(true);\n\n    const options = {\n      method: 'GET',\n      url: 'https://shazam-core.p.rapidapi.com/v1/charts/genre-world',\n      params: { genre_code: getGenreByTempeture(temperature), limit: '10' },\n      headers: {\n        'x-rapidapi-host': 'shazam-core.p.rapidapi.com',\n        'x-rapidapi-key': '23c098e44cmsh1744e6261cb7efep1c74a3jsn5bb6a8169eb2',\n      },\n    };\n\n    axios.request(options)\n      .then((response) => {\n        setPlaylist(response.data);\n      })\n      .catch((error) => {\n        toastErrorGetLocation('Error getting Musics', error.message);\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const contextValues = {\n    loading,\n    playlist,\n    getMusicByTemperature,\n  };\n\n  return (\n    <ShazamProviderContext.Provider value={contextValues}>\n      {children}\n    </ShazamProviderContext.Provider>\n  );\n};\n\nShazamProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ShazamProvider;\n","export const getGenreByTempeture = (tempeture) => {\n  if (tempeture < 16) return 'ALTERNATIVE';\n\n  if (tempeture < 24 && tempeture > 16) return 'COUNTRY';\n\n  if (tempeture < 32 && tempeture > 24) return 'POP';\n\n  return 'ROCK';\n};\n\nexport const setStorageMusicList = (key, value) => localStorage.setItem(key, value);\n\nexport const getStorageMusicList = (key) => localStorage.getItem(key);\n","import { useContext } from 'react';\nimport { ShazamProviderContext } from '../providers/shazam/shazam-provider';\n\nconst useShazam = () => useContext(\n  ShazamProviderContext,\n);\n\nexport default useShazam;\n","import {\n  Center, Heading,\n  Image,\n  Link,\n  SimpleGrid,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs, Text, VStack,\n} from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport useShazam from '../hooks/shazam-hooks';\nimport useWeather from '../hooks/weather-hooks';\nimport Loading from './loading';\n\nfunction MusicSection() {\n  const { playlist, loading, getMusicByTemperature } = useShazam();\n  const { weather } = useWeather();\n\n  useEffect(() => {\n    if (weather?.main?.temp) getMusicByTemperature(weather?.main?.temp);\n  }, [weather]);\n\n  return (\n    <Tabs isFitted variant=\"enclosed\">\n      <TabList mb=\"1em\">\n        <Tab _focus={{ outline: 'none' }} fontWeight=\"semibold\">Musicas Recomendadas</Tab>\n        <Tab _focus={{ outline: 'none' }} fontWeight=\"semibold\">Musicas Salvas</Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n          {!!loading && <Loading />}\n          <SimpleGrid columns={[1, 3]} spacing={10}>\n            {!loading && playlist.map((music) => (\n              <Center\n                key={music.id}\n                p={2}\n                maxWidth=\"sm\"\n                flexDirection=\"column\"\n                borderColor=\"gray.100\"\n                borderWidth=\"1px\"\n                borderRadius=\"md\"\n\n              >\n                <Image src={music.images.coverart} height=\"250px\" />\n\n                <VStack mt={4} maxWidth=\"250px\" width=\"250px\" alignItems=\"baseline\" as={Link} href={music.url}>\n                  <Heading as=\"h4\" fontSize=\"lg\">{music.title}</Heading>\n                  <Text>\n                    Autor:\n                    {' '}\n                    {music.subtitle}\n                  </Text>\n                </VStack>\n\n              </Center>\n            ))}\n          </SimpleGrid>\n        </TabPanel>\n        <TabPanel>\n          <p>two!</p>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nexport default MusicSection;\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport Header from '../components/header';\nimport MusicSection from '../components/music-section';\n\nconst PageMain = () => (\n  <Box>\n    <Header />\n    <MusicSection />\n  </Box>\n);\n\nexport default PageMain;\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport WeatherProvider from './providers/weather-provider';\n\nimport PageMain from './container/page-main';\nimport ShazamProvider from './providers/shazam/shazam-provider';\n\nfunction App() {\n  return (\n    <ChakraProvider resetCSS theme={theme}>\n      <WeatherProvider>\n        <ShazamProvider>\n          <PageMain />\n        </ShazamProvider>\n      </WeatherProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}